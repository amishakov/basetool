name: Cypress tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  Test:
    env:
      ENV: test
      NODE_ENV: test
      NEXT_PUBLIC_APP_ENV: test
      PGHOST: localhost
      PGUSER: postgres
      PGPORT: 5432
      DATABASE_URL: postgresql://postgres@127.0.0.1/basetool

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.5
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    # - name: Install zx & dotenv
    #   run: npm i -g add zx dotenv
    - name: Copy env variables
      run: |
        cp .env.test.sample .env.test
        echo "SECRET=123e48188c5e81703cf62bbb15d129a4329f5ec3c8fc2eda1493bb20448e8006" >> .env.test
        echo "DATABASE_URL=postgresql://postgres@127.0.0.1/basetool" >> .env.test
        echo "DATABASE_TEST_CREDENTIALS=postgresql://postgres@127.0.0.1/avodemo_development" >> .env.test
        createdb avodemo_development
        psql avodemo_development < prisma/sample-seed.sql
    - name: Get yarn cache directory path
      id: production-yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v1
      id: production-yarn-cache
      with:
        path: ${{ steps.production-yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-production-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-production-yarn-
    - name: Install deps
      run: yarn install
    - name: Migrate
      run: yarn dotenv -e .env.test -- yarn prisma migrate dev
    - name: Build
      run: npx dotenv -e .env.test -- yarn build
    - uses: cypress-io/github-action@v2
      env:
        NODE_ENV: test
        PORT: 4099
      with:
        start: yarn start -p 4099
    # after the test run completes
    # store videos and any screenshots
    # NOTE: screenshots will be generated only if E2E test failed
    # thus we store screenshots only on failures
    # Alternative: create and commit an empty cypress/screenshots folder
    # to always have something to upload
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
    # Test run video was always captured, so this action uses "always()" condition
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-videos
        path: cypress/videos
